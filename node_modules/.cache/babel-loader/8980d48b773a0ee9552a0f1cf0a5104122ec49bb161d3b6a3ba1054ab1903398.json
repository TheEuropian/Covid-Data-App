{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from 'axios';\nconst CovidData = () => {\n  _s();\n  const [allData, setAllData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await axios.get('https://opendata.ecdc.europa.eu/covid19/casedistribution/json/');\n      const isoData = response.data.records.map(item => {\n        const date = item.dateRep.split(\"/\").reverse().join(\"/\");\n        return {\n          ...item,\n          date\n        };\n      });\n      const sortedData = isoData.sort((a, b) => {\n        if (a.countriesAndTerritories < b.countriesAndTerritories) {\n          return -1;\n        }\n        if (a.countriesAndTerritories > b.countriesAndTerritories) {\n          return 1;\n        }\n        if (a.date < b.date) return -1;\n        if (a.date > b.date) return 1;\n        return 0;\n      });\n      const dataWithIndex = sortedData.map(item => {\n        let casesOn1000, deathsOn1000;\n\n        //To solve Cases_on_an_international_conveyance_Japan casesOn1000 NaN (if statement)\n\n        if (!item.hasOwnProperty('popData2019') || item.popData2019 === null) {\n          casesOn1000 = 0;\n          deathsOn1000 = 0;\n        } else {\n          casesOn1000 = (item.cases / item.popData2019 * 1000).toFixed(5);\n          deathsOn1000 = (item.deaths / item.popData2019 * 1000).toFixed(5);\n        }\n        // Add an id to each element in the array\n        const id = item.date + item.geoId;\n        return {\n          ...item,\n          id,\n          casesOn1000,\n          deathsOn1000\n        };\n      });\n      let allCases = {};\n      let allDeaths = {};\n      const allData = dataWithIndex.map(item => {\n        const country = item.countriesAndTerritories;\n        const cases = item.cases;\n        const deaths = item.deaths;\n        if (allCases[country]) {\n          allCases[country] += cases;\n          allDeaths[country] += deaths;\n        } else {\n          allCases[country] = cases;\n          allDeaths[country] = deaths;\n        }\n        item.allCases = allCases[country];\n        item.allDeaths = allDeaths[country];\n        return {\n          ...item,\n          allCases: allCases[country],\n          allDeaths: allDeaths[country]\n        };\n      }, {});\n      // here we need to create a new object allCountries.\n\n      const allCountries = allData.reduce((accumulator, item) => {\n        const date = item.date;\n        if (!accumulator[date]) {\n          accumulator[date] = {\n            date,\n            cases: 0,\n            deaths: 0,\n            allCases: 0,\n            allDeaths: 0,\n            casesOn1000: 0,\n            deathsOn1000: 0,\n            id: date + \"All_countries\",\n            countriesAndTerritories: \"All_countries\"\n          };\n        }\n        accumulator[date].cases += item.cases;\n        accumulator[date].deaths += item.deaths;\n        accumulator[date].allCases += item.allCases;\n        accumulator[date].allDeaths += item.allDeaths;\n        accumulator[date].casesOn1000 = parseFloat((accumulator[date].casesOn1000 + parseFloat(item.casesOn1000)).toFixed(5));\n        accumulator[date].deathsOn1000 = parseFloat((accumulator[date].deathsOn1000 + parseFloat(item.deathsOn1000)).toFixed(5));\n        return accumulator;\n      }, {});\n      const allCountriesArray = Object.values(allCountries);\n      allCountriesArray.sort((a, b) => {\n        if (a.date > b.date) return -1;\n        if (a.date < b.date) return 1;\n        return 0;\n      });\n      allCountriesArray.forEach(countryData => {\n        allData.push(countryData);\n      });\n      allData.sort((a, b) => {\n        if (a.countriesAndTerritories === \"All_countries\") return -1;\n        if (b.countriesAndTerritories === \"All_countries\") return 1;\n        return 0;\n      });\n      allData.unshift(allCountriesArray);\n      setAllData(allData);\n    };\n    fetchData();\n  }, []);\n  return allData;\n};\n_s(CovidData, \"wvSF2ckxQjUNASfZMrdtN9Q7fbY=\");\n_c = CovidData;\nexport default CovidData;\nvar _c;\n$RefreshReg$(_c, \"CovidData\");","map":{"version":3,"names":["axios","CovidData","_s","allData","setAllData","useState","useEffect","fetchData","response","get","isoData","data","records","map","item","date","dateRep","split","reverse","join","sortedData","sort","a","b","countriesAndTerritories","dataWithIndex","casesOn1000","deathsOn1000","hasOwnProperty","popData2019","cases","toFixed","deaths","id","geoId","allCases","allDeaths","country","allCountries","reduce","accumulator","parseFloat","allCountriesArray","Object","values","forEach","countryData","push","unshift","_c","$RefreshReg$"],"sources":["C:/Users/livea/React/covid-data-app/src/components/Data.js"],"sourcesContent":["\r\n\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nconst CovidData = () => {\r\n  const [allData, setAllData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await axios.get('https://opendata.ecdc.europa.eu/covid19/casedistribution/json/');\r\n\r\n  \r\n     \r\n\r\n       const isoData = response.data.records.map((item) => {\r\n       const date = item.dateRep.split(\"/\").reverse().join(\"/\");\r\n         \r\n   \r\n            return { ...item, date  };\r\n          });\r\n\r\n\r\n        const sortedData = isoData.sort((a, b) => {\r\n          if (a.countriesAndTerritories < b.countriesAndTerritories) {\r\n            return -1;\r\n          }\r\n          if (a.countriesAndTerritories > b.countriesAndTerritories) {\r\n            return 1;\r\n          }\r\n        \r\n          if (a.date < b.date) return -1;\r\n          if (a.date > b.date) return 1;\r\n          return 0;\r\n         \r\n        });\r\n\r\n       \r\n        const dataWithIndex = sortedData.map((item) => {\r\n          let casesOn1000, deathsOn1000;\r\n\r\n//To solve Cases_on_an_international_conveyance_Japan casesOn1000 NaN (if statement)\r\n\r\n          if (!item.hasOwnProperty('popData2019') || item.popData2019 === null) {\r\n            casesOn1000 = 0;\r\n            deathsOn1000 = 0;\r\n          } else {\r\n            casesOn1000 = ((item.cases / item.popData2019) * 1000).toFixed(5);\r\n            deathsOn1000 = ((item.deaths / item.popData2019) * 1000).toFixed(5);\r\n          }\r\n           // Add an id to each element in the array\r\n         const id = item.date + item.geoId;\r\n          return { ...item, id, casesOn1000, deathsOn1000};\r\n        });\r\n\r\n\r\n        let allCases = {};\r\n        let allDeaths = {};\r\n        \r\n        \r\n\r\n        const allData = dataWithIndex.map(( item) => {          \r\n          const country = item.countriesAndTerritories;\r\n          const cases = item.cases;\r\n          const deaths = item.deaths;\r\n       \r\n\r\n          if (allCases[country]){\r\n            allCases[country]+= cases;\r\n            allDeaths[country]+= deaths;\r\n          }else{\r\n            allCases[country]= cases;\r\n            allDeaths[country]= deaths;\r\n          }\r\n          item.allCases = allCases[country];\r\n          item.allDeaths = allDeaths[country];\r\n\r\n\r\n          return { ...item, allCases: allCases[country], allDeaths: allDeaths[country] };\r\n        },{})\r\n        // here we need to create a new object allCountries.\r\n\r\n        const allCountries = allData.reduce((accumulator, item) => {\r\n          const date = item.date;\r\n        \r\n          if (!accumulator[date]) {\r\n            accumulator[date] = {\r\n              date,\r\n              cases: 0,\r\n              deaths: 0,\r\n              allCases: 0,\r\n              allDeaths: 0,\r\n              casesOn1000: 0,\r\n              deathsOn1000: 0,\r\n              id: date + \"All_countries\",\r\n              countriesAndTerritories: \"All_countries\"\r\n            };\r\n          }\r\n        \r\n          accumulator[date].cases += item.cases;\r\n          accumulator[date].deaths += item.deaths;\r\n          accumulator[date].allCases += item.allCases;\r\n          accumulator[date].allDeaths += item.allDeaths;\r\n          accumulator[date].casesOn1000 = parseFloat((accumulator[date].casesOn1000 + parseFloat(item.casesOn1000)).toFixed(5));\r\n          accumulator[date].deathsOn1000 = parseFloat((accumulator[date].deathsOn1000 + parseFloat(item.deathsOn1000)).toFixed(5));\r\n        \r\n          return accumulator;\r\n        }, {});\r\n        const allCountriesArray = Object.values(allCountries);\r\n\r\n        allCountriesArray.sort((a, b) => {\r\n          if (a.date > b.date) return -1;\r\n          if (a.date < b.date) return 1;\r\n          return 0;\r\n        });\r\n\r\n        allCountriesArray.forEach(countryData => {\r\n          allData.push(countryData);\r\n        });\r\n        allData.sort((a, b) => {\r\n          if (a.countriesAndTerritories === \"All_countries\") return -1;\r\n          if (b.countriesAndTerritories === \"All_countries\") return 1;\r\n          return 0;\r\n        });\r\n       \r\n\r\n        allData.unshift(allCountriesArray);\r\n        setAllData(allData);\r\n      };\r\n  \r\n      fetchData();\r\n    }, []);\r\n\r\n     \r\n        return allData;\r\n      };\r\n\r\n      export default CovidData;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}