{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\livea\\\\React\\\\covid-data-app\\\\src\\\\components\\\\Graph.js\",\n  _s = $RefreshSig$();\nimport React, { useMemo } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Graph(_ref) {\n  _s();\n  let {\n    data,\n    selectedCountry\n  } = _ref;\n  // Filter data based on selected country and time range\n  const filteredData = useMemo(() => {\n    let dataToFilter = data.filter(item => {\n      if (selectedCountry === \"allCountries\") return true;\n      return item.countriesAndTerritories === selectedCountry;\n    });\n    return dataToFilter;\n  }, [data, selectedCountry]);\n  const series = [{\n    name: \"Cases\",\n    data: filteredData.map(item => item.allCases)\n  }, {\n    name: \"Deaths\",\n    data: filteredData.map(item => item.allDeaths)\n  }];\n  const xaxisCategories = filteredData.map(item => item.isoDateString);\n  const options = {\n    chart: {\n      height: 350,\n      type: \"area\"\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      curve: \"smooth\"\n    },\n    xaxis: {\n      type: \"datetime\",\n      categories: xaxisCategories\n    },\n    tooltip: {\n      x: {\n        format: \"yyyy/mm/dd\"\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chart\",\n    children: /*#__PURE__*/_jsxDEV(ReactApexChart, {\n      options: options,\n      series: series,\n      type: \"area\",\n      height: 350\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(Graph, \"GWnS+Ktnl5af5h1f8PWdHfSquWc=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useMemo","ReactApexChart","jsxDEV","_jsxDEV","Graph","_ref","_s","data","selectedCountry","filteredData","dataToFilter","filter","item","countriesAndTerritories","series","name","map","allCases","allDeaths","xaxisCategories","isoDateString","options","chart","height","type","dataLabels","enabled","stroke","curve","xaxis","categories","tooltip","x","format","id","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/livea/React/covid-data-app/src/components/Graph.js"],"sourcesContent":["import React, { useMemo } from \"react\";\r\nimport ReactApexChart from \"react-apexcharts\";\r\n\r\n\r\nfunction Graph({ data, selectedCountry }) {\r\n  // Filter data based on selected country and time range\r\n  const filteredData = useMemo(() => {\r\n    let dataToFilter = data.filter((item) => {\r\n      if (selectedCountry === \"allCountries\") return true;\r\n      return item.countriesAndTerritories === selectedCountry;\r\n    });\r\n\r\n\r\n\r\n    return dataToFilter;\r\n  }, [data, selectedCountry]);\r\n\r\n  const series = [\r\n    {\r\n      name: \"Cases\",\r\n      data: filteredData.map((item) => item.allCases),\r\n    },\r\n    {\r\n      name: \"Deaths\",\r\n      data: filteredData.map((item) => item.allDeaths),\r\n    },\r\n  ];\r\n\r\n  const xaxisCategories = filteredData.map((item) => item.isoDateString);\r\n\r\n  const options = {\r\n    chart: {\r\n      height: 350,\r\n      type: \"area\",\r\n    },\r\n    dataLabels: {\r\n      enabled: false,\r\n    },\r\n    stroke: {\r\n      curve: \"smooth\",\r\n    },\r\n    xaxis: {\r\n      type: \"datetime\",\r\n      categories: xaxisCategories,\r\n    },\r\n    tooltip: {\r\n      x: {\r\n        format: \"yyyy/mm/dd\",\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div id=\"chart\">\r\n      <ReactApexChart options={options} series={series} type=\"area\" height={350} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Graph;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,OAAO,QAAQ,OAAO;AACtC,OAAOC,cAAc,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG9C,SAASC,KAAKA,CAAAC,IAAA,EAA4B;EAAAC,EAAA;EAAA,IAA3B;IAAEC,IAAI;IAAEC;EAAgB,CAAC,GAAAH,IAAA;EACtC;EACA,MAAMI,YAAY,GAAGT,OAAO,CAAC,MAAM;IACjC,IAAIU,YAAY,GAAGH,IAAI,CAACI,MAAM,CAAEC,IAAI,IAAK;MACvC,IAAIJ,eAAe,KAAK,cAAc,EAAE,OAAO,IAAI;MACnD,OAAOI,IAAI,CAACC,uBAAuB,KAAKL,eAAe;IACzD,CAAC,CAAC;IAIF,OAAOE,YAAY;EACrB,CAAC,EAAE,CAACH,IAAI,EAAEC,eAAe,CAAC,CAAC;EAE3B,MAAMM,MAAM,GAAG,CACb;IACEC,IAAI,EAAE,OAAO;IACbR,IAAI,EAAEE,YAAY,CAACO,GAAG,CAAEJ,IAAI,IAAKA,IAAI,CAACK,QAAQ;EAChD,CAAC,EACD;IACEF,IAAI,EAAE,QAAQ;IACdR,IAAI,EAAEE,YAAY,CAACO,GAAG,CAAEJ,IAAI,IAAKA,IAAI,CAACM,SAAS;EACjD,CAAC,CACF;EAED,MAAMC,eAAe,GAAGV,YAAY,CAACO,GAAG,CAAEJ,IAAI,IAAKA,IAAI,CAACQ,aAAa,CAAC;EAEtE,MAAMC,OAAO,GAAG;IACdC,KAAK,EAAE;MACLC,MAAM,EAAE,GAAG;MACXC,IAAI,EAAE;IACR,CAAC;IACDC,UAAU,EAAE;MACVC,OAAO,EAAE;IACX,CAAC;IACDC,MAAM,EAAE;MACNC,KAAK,EAAE;IACT,CAAC;IACDC,KAAK,EAAE;MACLL,IAAI,EAAE,UAAU;MAChBM,UAAU,EAAEX;IACd,CAAC;IACDY,OAAO,EAAE;MACPC,CAAC,EAAE;QACDC,MAAM,EAAE;MACV;IACF;EACF,CAAC;EAED,oBACE9B,OAAA;IAAK+B,EAAE,EAAC,OAAO;IAAAC,QAAA,eACbhC,OAAA,CAACF,cAAc;MAACoB,OAAO,EAAEA,OAAQ;MAACP,MAAM,EAAEA,MAAO;MAACU,IAAI,EAAC,MAAM;MAACD,MAAM,EAAE;IAAI;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAG;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACzE;AAEV;AAACjC,EAAA,CArDQF,KAAK;AAAAoC,EAAA,GAALpC,KAAK;AAuDd,eAAeA,KAAK;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}