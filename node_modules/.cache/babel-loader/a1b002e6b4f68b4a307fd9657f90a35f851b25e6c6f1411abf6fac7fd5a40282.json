{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\livea\\\\React\\\\covid-data-app\\\\src\\\\components\\\\Graph.js\",\n  _s = $RefreshSig$();\nimport React, { useMemo } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Graph(_ref) {\n  _s();\n  let {\n    data,\n    selectedCountry,\n    dateRange\n  } = _ref;\n  // Filter data based on selected country and date range\n  const filteredData = useMemo(() => {\n    let dataToFilter = data.filter(item => {\n      if (selectedCountry === \"allCountries\") return true;\n      return item.countriesAndTerritories === selectedCountry;\n    });\n    if (dateRange && dateRange.length === 2) {\n      dataToFilter = dataToFilter.filter(item => item.date >= dateRange[0] && item.date <= dateRange[1]);\n    }\n    return dataToFilter;\n  }, [data, selectedCountry, dateRange]);\n  const series = [{\n    name: \"Cases\",\n    data: filteredData.map(item => item.allCases)\n  }, {\n    name: \"Deaths\",\n    data: filteredData.map(item => item.allDeaths)\n  }];\n  const xaxisCategories = filteredData.map(item => item.isoDateString);\n  const options = {\n    chart: {\n      height: 350,\n      type: \"area\"\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      curve: \"smooth\"\n    },\n    xaxis: {\n      type: \"datetime\",\n      categories: xaxisCategories\n    },\n    tooltip: {\n      x: {\n        format: \"yyyy/mm/dd\"\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chart\",\n    children: /*#__PURE__*/_jsxDEV(ReactApexChart, {\n      options: options,\n      series: series,\n      type: \"area\",\n      height: 350\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(Graph, \"GWnS+Ktnl5af5h1f8PWdHfSquWc=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useMemo","ReactApexChart","jsxDEV","_jsxDEV","Graph","_ref","_s","data","selectedCountry","dateRange","filteredData","dataToFilter","filter","item","countriesAndTerritories","length","date","series","name","map","allCases","allDeaths","xaxisCategories","isoDateString","options","chart","height","type","dataLabels","enabled","stroke","curve","xaxis","categories","tooltip","x","format","id","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/livea/React/covid-data-app/src/components/Graph.js"],"sourcesContent":["import React, { useMemo } from \"react\";\r\nimport ReactApexChart from \"react-apexcharts\";\r\n\r\nfunction Graph({ data, selectedCountry, dateRange }) {\r\n  // Filter data based on selected country and date range\r\n  const filteredData = useMemo(() => {\r\n    let dataToFilter = data.filter((item) => {\r\n      if (selectedCountry === \"allCountries\") return true;\r\n      return item.countriesAndTerritories === selectedCountry;\r\n    });\r\n\r\n    if (dateRange && dateRange.length === 2) {\r\n      dataToFilter = dataToFilter.filter(\r\n        (item) =>\r\n          item.date >= dateRange[0] && item.date <= dateRange[1]\r\n      );\r\n    }\r\n\r\n    return dataToFilter;\r\n  }, [data, selectedCountry, dateRange]);\r\n\r\n  const series = [\r\n    {\r\n      name: \"Cases\",\r\n      data: filteredData.map((item) => item.allCases),\r\n    },\r\n    {\r\n      name: \"Deaths\",\r\n      data: filteredData.map((item) => item.allDeaths),\r\n    },\r\n  ];\r\n\r\n  const xaxisCategories = filteredData.map((item) => item.isoDateString);\r\n\r\n  const options = {\r\n    chart: {\r\n      height: 350,\r\n      type: \"area\",\r\n    },\r\n    dataLabels: {\r\n      enabled: false,\r\n    },\r\n    stroke: {\r\n      curve: \"smooth\",\r\n    },\r\n    xaxis: {\r\n      type: \"datetime\",\r\n      categories: xaxisCategories,\r\n    },\r\n    tooltip: {\r\n      x: {\r\n        format: \"yyyy/mm/dd\",\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div id=\"chart\">\r\n      <ReactApexChart options={options} series={series} type=\"area\" height={350} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Graph;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,OAAO,QAAQ,OAAO;AACtC,OAAOC,cAAc,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,KAAKA,CAAAC,IAAA,EAAuC;EAAAC,EAAA;EAAA,IAAtC;IAAEC,IAAI;IAAEC,eAAe;IAAEC;EAAU,CAAC,GAAAJ,IAAA;EACjD;EACA,MAAMK,YAAY,GAAGV,OAAO,CAAC,MAAM;IACjC,IAAIW,YAAY,GAAGJ,IAAI,CAACK,MAAM,CAAEC,IAAI,IAAK;MACvC,IAAIL,eAAe,KAAK,cAAc,EAAE,OAAO,IAAI;MACnD,OAAOK,IAAI,CAACC,uBAAuB,KAAKN,eAAe;IACzD,CAAC,CAAC;IAEF,IAAIC,SAAS,IAAIA,SAAS,CAACM,MAAM,KAAK,CAAC,EAAE;MACvCJ,YAAY,GAAGA,YAAY,CAACC,MAAM,CAC/BC,IAAI,IACHA,IAAI,CAACG,IAAI,IAAIP,SAAS,CAAC,CAAC,CAAC,IAAII,IAAI,CAACG,IAAI,IAAIP,SAAS,CAAC,CAAC,CAAC,CACzD;IACH;IAEA,OAAOE,YAAY;EACrB,CAAC,EAAE,CAACJ,IAAI,EAAEC,eAAe,EAAEC,SAAS,CAAC,CAAC;EAEtC,MAAMQ,MAAM,GAAG,CACb;IACEC,IAAI,EAAE,OAAO;IACbX,IAAI,EAAEG,YAAY,CAACS,GAAG,CAAEN,IAAI,IAAKA,IAAI,CAACO,QAAQ;EAChD,CAAC,EACD;IACEF,IAAI,EAAE,QAAQ;IACdX,IAAI,EAAEG,YAAY,CAACS,GAAG,CAAEN,IAAI,IAAKA,IAAI,CAACQ,SAAS;EACjD,CAAC,CACF;EAED,MAAMC,eAAe,GAAGZ,YAAY,CAACS,GAAG,CAAEN,IAAI,IAAKA,IAAI,CAACU,aAAa,CAAC;EAEtE,MAAMC,OAAO,GAAG;IACdC,KAAK,EAAE;MACLC,MAAM,EAAE,GAAG;MACXC,IAAI,EAAE;IACR,CAAC;IACDC,UAAU,EAAE;MACVC,OAAO,EAAE;IACX,CAAC;IACDC,MAAM,EAAE;MACNC,KAAK,EAAE;IACT,CAAC;IACDC,KAAK,EAAE;MACLL,IAAI,EAAE,UAAU;MAChBM,UAAU,EAAEX;IACd,CAAC;IACDY,OAAO,EAAE;MACPC,CAAC,EAAE;QACDC,MAAM,EAAE;MACV;IACF;EACF,CAAC;EAED,oBACEjC,OAAA;IAAKkC,EAAE,EAAC,OAAO;IAAAC,QAAA,eACbnC,OAAA,CAACF,cAAc;MAACuB,OAAO,EAAEA,OAAQ;MAACP,MAAM,EAAEA,MAAO;MAACU,IAAI,EAAC,MAAM;MAACD,MAAM,EAAE;IAAI;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAG;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACzE;AAEV;AAACpC,EAAA,CA1DQF,KAAK;AAAAuC,EAAA,GAALvC,KAAK;AA4Dd,eAAeA,KAAK;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}