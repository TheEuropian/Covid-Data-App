{"ast":null,"code":"import axios from 'axios';\nconst CovidData = async () => {\n  const response = await axios.get('https://opendata.ecdc.europa.eu/covid19/casedistribution/json/');\n  const isoData = response.data.records.map(item => {\n    const date = item.dateRep.split(\"/\").reverse().join(\"/\");\n    return {\n      ...item,\n      date\n    };\n  });\n  const sortedData = isoData.sort((a, b) => {\n    if (a.countriesAndTerritories < b.countriesAndTerritories) {\n      return -1;\n    }\n    if (a.countriesAndTerritories > b.countriesAndTerritories) {\n      return 1;\n    }\n    if (a.date < b.date) return -1;\n    if (a.date > b.date) return 1;\n    return 0;\n  });\n  const dataWithIndex = sortedData.map(item => {\n    let casesOn1000, deathsOn1000;\n\n    //To solve Cases_on_an_international_conveyance_Japan casesOn1000 NaN (if statement)\n\n    if (!item.hasOwnProperty('popData2019') || item.popData2019 === null) {\n      casesOn1000 = 0;\n      deathsOn1000 = 0;\n    } else {\n      casesOn1000 = (item.cases / item.popData2019 * 1000).toFixed(5);\n      deathsOn1000 = (item.deaths / item.popData2019 * 1000).toFixed(5);\n    }\n    // Add an id to each element in the array\n    const id = item.date + item.geoId;\n    return {\n      ...item,\n      id,\n      casesOn1000,\n      deathsOn1000\n    };\n  });\n  let allCases = {};\n  let allDeaths = {};\n  const allData = dataWithIndex.map(item => {\n    const country = item.countriesAndTerritories;\n    const cases = item.cases;\n    const deaths = item.deaths;\n    if (allCases[country]) {\n      allCases[country] += cases;\n      allDeaths[country] += deaths;\n    } else {\n      allCases[country] = cases;\n      allDeaths[country] = deaths;\n    }\n    item.allCases = allCases[country];\n    item.allDeaths = allDeaths[country];\n    return {\n      ...item,\n      allCases: allCases[country],\n      allDeaths: allDeaths[country]\n    };\n  }, {});\n  // here we need to create a new object allCountries.\n\n  const allCountries = allData.reduce((accumulator, item) => {\n    const date = item.date;\n    if (!accumulator[date]) {\n      accumulator[date] = {\n        date,\n        cases: 0,\n        deaths: 0,\n        allCases: 0,\n        allDeaths: 0,\n        casesOn1000: 0,\n        deathsOn1000: 0,\n        id: date + \"All_countries\",\n        countriesAndTerritories: \"All_countries\"\n      };\n    }\n    accumulator[date].cases += item.cases;\n    accumulator[date].deaths += item.deaths;\n    accumulator[date].allCases += item.allCases;\n    accumulator[date].allDeaths += item.allDeaths;\n    accumulator[date].casesOn1000 = parseFloat((accumulator[date].casesOn1000 + parseFloat(item.casesOn1000)).toFixed(5));\n    accumulator[date].deathsOn1000 = parseFloat((accumulator[date].deathsOn1000 + parseFloat(item.deathsOn1000)).toFixed(5));\n    return accumulator;\n  }, {});\n  const allCountriesArray = Object.values(allCountries);\n  allCountriesArray.sort((a, b) => {\n    if (a.date > b.date) return -1;\n    if (a.date < b.date) return 1;\n    return 0;\n  });\n  allCountriesArray.forEach(countryData => {\n    allData.push(countryData);\n  });\n  allData.sort((a, b) => {\n    if (a.countriesAndTerritories === \"All_countries\") return -1;\n    if (b.countriesAndTerritories === \"All_countries\") return 1;\n    return 0;\n  });\n  allData.unshift(allCountriesArray);\n  return allData;\n};\n_c = CovidData;\nexport default CovidData;\nvar _c;\n$RefreshReg$(_c, \"CovidData\");","map":{"version":3,"names":["axios","CovidData","response","get","isoData","data","records","map","item","date","dateRep","split","reverse","join","sortedData","sort","a","b","countriesAndTerritories","dataWithIndex","casesOn1000","deathsOn1000","hasOwnProperty","popData2019","cases","toFixed","deaths","id","geoId","allCases","allDeaths","allData","country","allCountries","reduce","accumulator","parseFloat","allCountriesArray","Object","values","forEach","countryData","push","unshift","_c","$RefreshReg$"],"sources":["C:/Users/livea/React/covid-data-app/src/components/Data.js"],"sourcesContent":["\r\n\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nconst CovidData = async () => {\r\n  const response = await axios.get('https://opendata.ecdc.europa.eu/covid19/casedistribution/json/');\r\n\r\n  \r\n     \r\n\r\n       const isoData = response.data.records.map((item) => {\r\n       const date = item.dateRep.split(\"/\").reverse().join(\"/\");\r\n         \r\n   \r\n            return { ...item, date  };\r\n          });\r\n\r\n\r\n        const sortedData = isoData.sort((a, b) => {\r\n          if (a.countriesAndTerritories < b.countriesAndTerritories) {\r\n            return -1;\r\n          }\r\n          if (a.countriesAndTerritories > b.countriesAndTerritories) {\r\n            return 1;\r\n          }\r\n        \r\n          if (a.date < b.date) return -1;\r\n          if (a.date > b.date) return 1;\r\n          return 0;\r\n         \r\n        });\r\n\r\n       \r\n        const dataWithIndex = sortedData.map((item) => {\r\n          let casesOn1000, deathsOn1000;\r\n\r\n//To solve Cases_on_an_international_conveyance_Japan casesOn1000 NaN (if statement)\r\n\r\n          if (!item.hasOwnProperty('popData2019') || item.popData2019 === null) {\r\n            casesOn1000 = 0;\r\n            deathsOn1000 = 0;\r\n          } else {\r\n            casesOn1000 = ((item.cases / item.popData2019) * 1000).toFixed(5);\r\n            deathsOn1000 = ((item.deaths / item.popData2019) * 1000).toFixed(5);\r\n          }\r\n           // Add an id to each element in the array\r\n         const id = item.date + item.geoId;\r\n          return { ...item, id, casesOn1000, deathsOn1000};\r\n        });\r\n\r\n\r\n        let allCases = {};\r\n        let allDeaths = {};\r\n        \r\n        \r\n\r\n        const allData = dataWithIndex.map(( item) => {          \r\n          const country = item.countriesAndTerritories;\r\n          const cases = item.cases;\r\n          const deaths = item.deaths;\r\n       \r\n\r\n          if (allCases[country]){\r\n            allCases[country]+= cases;\r\n            allDeaths[country]+= deaths;\r\n          }else{\r\n            allCases[country]= cases;\r\n            allDeaths[country]= deaths;\r\n          }\r\n          item.allCases = allCases[country];\r\n          item.allDeaths = allDeaths[country];\r\n\r\n\r\n          return { ...item, allCases: allCases[country], allDeaths: allDeaths[country] };\r\n        },{})\r\n        // here we need to create a new object allCountries.\r\n\r\n        const allCountries = allData.reduce((accumulator, item) => {\r\n          const date = item.date;\r\n        \r\n          if (!accumulator[date]) {\r\n            accumulator[date] = {\r\n              date,\r\n              cases: 0,\r\n              deaths: 0,\r\n              allCases: 0,\r\n              allDeaths: 0,\r\n              casesOn1000: 0,\r\n              deathsOn1000: 0,\r\n              id: date + \"All_countries\",\r\n              countriesAndTerritories: \"All_countries\"\r\n            };\r\n          }\r\n        \r\n          accumulator[date].cases += item.cases;\r\n          accumulator[date].deaths += item.deaths;\r\n          accumulator[date].allCases += item.allCases;\r\n          accumulator[date].allDeaths += item.allDeaths;\r\n          accumulator[date].casesOn1000 = parseFloat((accumulator[date].casesOn1000 + parseFloat(item.casesOn1000)).toFixed(5));\r\n          accumulator[date].deathsOn1000 = parseFloat((accumulator[date].deathsOn1000 + parseFloat(item.deathsOn1000)).toFixed(5));\r\n        \r\n          return accumulator;\r\n        }, {});\r\n        const allCountriesArray = Object.values(allCountries);\r\n\r\n        allCountriesArray.sort((a, b) => {\r\n          if (a.date > b.date) return -1;\r\n          if (a.date < b.date) return 1;\r\n          return 0;\r\n        });\r\n\r\n        allCountriesArray.forEach(countryData => {\r\n          allData.push(countryData);\r\n        });\r\n        allData.sort((a, b) => {\r\n          if (a.countriesAndTerritories === \"All_countries\") return -1;\r\n          if (b.countriesAndTerritories === \"All_countries\") return 1;\r\n          return 0;\r\n        });\r\n       \r\n\r\n        allData.unshift(allCountriesArray);\r\n\r\n     \r\n        return allData;\r\n      };\r\n\r\n      export default CovidData;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}