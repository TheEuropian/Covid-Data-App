{"ast":null,"code":"import axios from 'axios';\nexport const CovidData = async () => {\n  const response = await axios.get('https://opendata.ecdc.europa.eu/covid19/casedistribution/json/');\n  const isoData = response.data.records.map(item => {\n    const date = item.dateRep.split(\"/\").reverse().join('-');\n    return {\n      ...item,\n      date\n    };\n  });\n  const sortedData = isoData.sort((a, b) => {\n    if (a.countriesAndTerritories < b.countriesAndTerritories) {\n      return -1;\n    }\n    if (a.countriesAndTerritories > b.countriesAndTerritories) {\n      return 1;\n    }\n    if (a.date < b.date) return -1;\n    if (a.date > b.date) return 1;\n    return 0;\n  });\n\n  // Add an id to each element in the array\n  const dataWithIndex = sortedData.map(item => {\n    const casesOn1000 = (item.cases / item.popData2019 * 1000).toFixed(5);\n    const deathsOn1000 = (item.deaths / item.popData2019 * 1000).toFixed(5);\n    const id = item.date + item.geoId;\n    return {\n      ...item,\n      id,\n      casesOn1000,\n      deathsOn1000\n    };\n  });\n  let allCases = {};\n  let allDeaths = {};\n  const allData = dataWithIndex.map(item => {\n    const country = item.countriesAndTerritories;\n    const cases = item.cases;\n    const deaths = item.deaths;\n    if (allCases[country]) {\n      allCases[country] += cases;\n      allDeaths[country] += deaths;\n    } else {\n      allCases[country] = cases;\n      allDeaths[country] = deaths;\n    }\n    item.allCases = allCases[country];\n    item.allDeaths = allDeaths[country];\n    return {\n      ...item,\n      allCases: allCases[country],\n      allDeaths: allDeaths[country]\n    };\n  }, {});\n  return allData;\n};\n_c = CovidData;\nvar _c;\n$RefreshReg$(_c, \"CovidData\");","map":{"version":3,"names":["axios","CovidData","response","get","isoData","data","records","map","item","date","dateRep","split","reverse","join","sortedData","sort","a","b","countriesAndTerritories","dataWithIndex","casesOn1000","cases","popData2019","toFixed","deathsOn1000","deaths","id","geoId","allCases","allDeaths","allData","country","_c","$RefreshReg$"],"sources":["C:/Users/livea/React/covid-data-app/src/components/Data.js"],"sourcesContent":["\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nexport const CovidData = async () => {\r\n\r\n  const response = await axios.get('https://opendata.ecdc.europa.eu/covid19/casedistribution/json/');\r\n\r\n  \r\n     \r\n\r\n       const isoData = response.data.records.map((item) => {\r\n          const date = item.dateRep.split(\"/\").reverse().join('-');\r\n         \r\n       \r\n        \r\n          return { ...item, date  };\r\n        });\r\n\r\n\r\n        const sortedData = isoData.sort((a, b) => {\r\n          if (a.countriesAndTerritories < b.countriesAndTerritories) {\r\n            return -1;\r\n          }\r\n          if (a.countriesAndTerritories > b.countriesAndTerritories) {\r\n            return 1;\r\n          }\r\n        \r\n          if (a.date < b.date) return -1;\r\n          if (a.date > b.date) return 1;\r\n          return 0;\r\n         \r\n        });\r\n\r\n        // Add an id to each element in the array\r\n        const dataWithIndex = sortedData.map((item) => {\r\n          const casesOn1000 = ((item.cases/ item.popData2019) *1000).toFixed(5);\r\n          const deathsOn1000 = ((item.deaths/ item.popData2019) *1000).toFixed(5);\r\n         const id = item.date + item.geoId;\r\n          return { ...item, id, casesOn1000, deathsOn1000};\r\n        });\r\n\r\n\r\n        let allCases = {};\r\n        let allDeaths = {};\r\n       \r\n        \r\n        const allData = dataWithIndex.map(( item) => {          \r\n          const country = item.countriesAndTerritories;\r\n          const cases = item.cases;\r\n          const deaths = item.deaths;\r\n       \r\n\r\n          if (allCases[country]){\r\n            allCases[country]+= cases;\r\n            allDeaths[country]+= deaths;\r\n          }else{\r\n            allCases[country]= cases;\r\n            allDeaths[country]= deaths;\r\n          }\r\n          item.allCases = allCases[country];\r\n          item.allDeaths = allDeaths[country];\r\n\r\n\r\n          return { ...item, allCases: allCases[country], allDeaths: allDeaths[country] };\r\n        },{})\r\n\r\n      \r\n       \r\n        \r\n  return allData;\r\n};"],"mappings":"AACA,OAAOA,KAAK,MAAM,OAAO;AAIzB,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;EAEnC,MAAMC,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAG,CAAC,gEAAgE,CAAC;EAK7F,MAAMC,OAAO,GAAGF,QAAQ,CAACG,IAAI,CAACC,OAAO,CAACC,GAAG,CAAEC,IAAI,IAAK;IACjD,MAAMC,IAAI,GAAGD,IAAI,CAACE,OAAO,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,OAAO,EAAE,CAACC,IAAI,CAAC,GAAG,CAAC;IAIxD,OAAO;MAAE,GAAGL,IAAI;MAAEC;IAAM,CAAC;EAC3B,CAAC,CAAC;EAGF,MAAMK,UAAU,GAAGV,OAAO,CAACW,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IACxC,IAAID,CAAC,CAACE,uBAAuB,GAAGD,CAAC,CAACC,uBAAuB,EAAE;MACzD,OAAO,CAAC,CAAC;IACX;IACA,IAAIF,CAAC,CAACE,uBAAuB,GAAGD,CAAC,CAACC,uBAAuB,EAAE;MACzD,OAAO,CAAC;IACV;IAEA,IAAIF,CAAC,CAACP,IAAI,GAAGQ,CAAC,CAACR,IAAI,EAAE,OAAO,CAAC,CAAC;IAC9B,IAAIO,CAAC,CAACP,IAAI,GAAGQ,CAAC,CAACR,IAAI,EAAE,OAAO,CAAC;IAC7B,OAAO,CAAC;EAEV,CAAC,CAAC;;EAEF;EACA,MAAMU,aAAa,GAAGL,UAAU,CAACP,GAAG,CAAEC,IAAI,IAAK;IAC7C,MAAMY,WAAW,GAAG,CAAEZ,IAAI,CAACa,KAAK,GAAEb,IAAI,CAACc,WAAW,GAAG,IAAI,EAAEC,OAAO,CAAC,CAAC,CAAC;IACrE,MAAMC,YAAY,GAAG,CAAEhB,IAAI,CAACiB,MAAM,GAAEjB,IAAI,CAACc,WAAW,GAAG,IAAI,EAAEC,OAAO,CAAC,CAAC,CAAC;IACxE,MAAMG,EAAE,GAAGlB,IAAI,CAACC,IAAI,GAAGD,IAAI,CAACmB,KAAK;IAChC,OAAO;MAAE,GAAGnB,IAAI;MAAEkB,EAAE;MAAEN,WAAW;MAAEI;IAAY,CAAC;EAClD,CAAC,CAAC;EAGF,IAAII,QAAQ,GAAG,CAAC,CAAC;EACjB,IAAIC,SAAS,GAAG,CAAC,CAAC;EAGlB,MAAMC,OAAO,GAAGX,aAAa,CAACZ,GAAG,CAAGC,IAAI,IAAK;IAC3C,MAAMuB,OAAO,GAAGvB,IAAI,CAACU,uBAAuB;IAC5C,MAAMG,KAAK,GAAGb,IAAI,CAACa,KAAK;IACxB,MAAMI,MAAM,GAAGjB,IAAI,CAACiB,MAAM;IAG1B,IAAIG,QAAQ,CAACG,OAAO,CAAC,EAAC;MACpBH,QAAQ,CAACG,OAAO,CAAC,IAAGV,KAAK;MACzBQ,SAAS,CAACE,OAAO,CAAC,IAAGN,MAAM;IAC7B,CAAC,MAAI;MACHG,QAAQ,CAACG,OAAO,CAAC,GAAEV,KAAK;MACxBQ,SAAS,CAACE,OAAO,CAAC,GAAEN,MAAM;IAC5B;IACAjB,IAAI,CAACoB,QAAQ,GAAGA,QAAQ,CAACG,OAAO,CAAC;IACjCvB,IAAI,CAACqB,SAAS,GAAGA,SAAS,CAACE,OAAO,CAAC;IAGnC,OAAO;MAAE,GAAGvB,IAAI;MAAEoB,QAAQ,EAAEA,QAAQ,CAACG,OAAO,CAAC;MAAEF,SAAS,EAAEA,SAAS,CAACE,OAAO;IAAE,CAAC;EAChF,CAAC,EAAC,CAAC,CAAC,CAAC;EAKX,OAAOD,OAAO;AAChB,CAAC;AAACE,EAAA,GAnEW/B,SAAS;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}