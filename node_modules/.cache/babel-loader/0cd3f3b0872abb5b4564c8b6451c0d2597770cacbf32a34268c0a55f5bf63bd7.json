{"ast":null,"code":"import React, { Component } from 'react';\nimport axios from 'axios';\nclass CovidData extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      allData: []\n    };\n  }\n  async componentDidMount() {\n    const response = await axios.get('https://opendata.ecdc.europa.eu/covid19/casedistribution/json/');\n    const isoData = response.data.records.map(item => {\n      const date = item.dateRep.split(\"/\").reverse().join(\"/\");\n      return {\n        ...item,\n        date\n      };\n    });\n    const sortedData = isoData.sort((a, b) => {\n      if (a.countriesAndTerritories < b.countriesAndTerritories) {\n        return -1;\n      }\n      if (a.countriesAndTerritories > b.countriesAndTerritories) {\n        return 1;\n      }\n      if (a.date < b.date) return -1;\n      if (a.date > b.date) return 1;\n      return 0;\n    });\n    const dataWithIndex = sortedData.map(item => {\n      let casesOn1000, deathsOn1000;\n\n      //To solve Cases_on_an_international_conveyance_Japan casesOn1000 NaN (if statement)\n\n      if (!item.hasOwnProperty('popData2019') || item.popData2019 === null) {\n        casesOn1000 = 0;\n        deathsOn1000 = 0;\n      } else {\n        casesOn1000 = (item.cases / item.popData2019 * 1000).toFixed(5);\n        deathsOn1000 = (item.deaths / item.popData2019 * 1000).toFixed(5);\n      }\n      // Add an id to each element in the array\n      const id = item.date + item.geoId;\n      return {\n        ...item,\n        id,\n        casesOn1000,\n        deathsOn1000\n      };\n    });\n    let allCases = {};\n    let allDeaths = {};\n    const allData = dataWithIndex.map(item => {\n      const country = item.countriesAndTerritories;\n      const cases = item.cases;\n      const deaths = item.deaths;\n      if (allCases[country]) {\n        allCases[country] += cases;\n        allDeaths[country] += deaths;\n      } else {\n        allCases[country] = cases;\n        allDeaths[country] = deaths;\n      }\n      item.allCases = allCases[country];\n      item.allDeaths = allDeaths[country];\n      return {\n        ...item,\n        allCases: allCases[country],\n        allDeaths: allDeaths[country]\n      };\n    }, {});\n    // here we need to create a new object allCountries.\n\n    const allCountries = allData.reduce((accumulator, item) => {\n      const date = item.date;\n      if (!accumulator[date]) {\n        accumulator[date] = {\n          date,\n          cases: 0,\n          deaths: 0,\n          allCases: 0,\n          allDeaths: 0,\n          casesOn1000: 0,\n          deathsOn1000: 0,\n          id: date + \"All_countries\",\n          countriesAndTerritories: \"All_countries\"\n        };\n      }\n      accumulator[date].cases += item.cases;\n      accumulator[date].deaths += item.deaths;\n      accumulator[date].allCases += item.allCases;\n      accumulator[date].allDeaths += item.allDeaths;\n      accumulator[date].casesOn1000 = parseFloat((accumulator[date].casesOn1000 + parseFloat(item.casesOn1000)).toFixed(5));\n      accumulator[date].deathsOn1000 = parseFloat((accumulator[date].deathsOn1000 + parseFloat(item.deathsOn1000)).toFixed(5));\n      return accumulator;\n    }, {});\n    const allCountriesArray = Object.values(allCountries);\n    allCountriesArray.sort((a, b) => {\n      if (a.date > b.date) return -1;\n      if (a.date < b.date) return 1;\n      return 0;\n    });\n    allCountriesArray.forEach(countryData => {\n      allData.push(countryData);\n    });\n    allData.sort((a, b) => {\n      if (a.countriesAndTerritories === \"All_countries\") return -1;\n      if (b.countriesAndTerritories === \"All_countries\") return 1;\n      return 0;\n    });\n    allData.unshift(allCountriesArray);\n    return allData;\n  }\n}\n;\nexport default CovidData;","map":{"version":3,"names":["React","Component","axios","CovidData","constructor","arguments","state","allData","componentDidMount","response","get","isoData","data","records","map","item","date","dateRep","split","reverse","join","sortedData","sort","a","b","countriesAndTerritories","dataWithIndex","casesOn1000","deathsOn1000","hasOwnProperty","popData2019","cases","toFixed","deaths","id","geoId","allCases","allDeaths","country","allCountries","reduce","accumulator","parseFloat","allCountriesArray","Object","values","forEach","countryData","push","unshift"],"sources":["C:/Users/livea/React/covid-data-app/src/components/Data.js"],"sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nclass CovidData extends Component {\r\n  state = {\r\n    allData: [],\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const response = await axios.get('https://opendata.ecdc.europa.eu/covid19/casedistribution/json/');\r\n\r\n  \r\n     \r\n\r\n       const isoData = response.data.records.map((item) => {\r\n       const date = item.dateRep.split(\"/\").reverse().join(\"/\");\r\n         \r\n   \r\n            return { ...item, date  };\r\n          });\r\n\r\n\r\n        const sortedData = isoData.sort((a, b) => {\r\n          if (a.countriesAndTerritories < b.countriesAndTerritories) {\r\n            return -1;\r\n          }\r\n          if (a.countriesAndTerritories > b.countriesAndTerritories) {\r\n            return 1;\r\n          }\r\n        \r\n          if (a.date < b.date) return -1;\r\n          if (a.date > b.date) return 1;\r\n          return 0;\r\n         \r\n        });\r\n\r\n       \r\n        const dataWithIndex = sortedData.map((item) => {\r\n          let casesOn1000, deathsOn1000;\r\n\r\n//To solve Cases_on_an_international_conveyance_Japan casesOn1000 NaN (if statement)\r\n\r\n          if (!item.hasOwnProperty('popData2019') || item.popData2019 === null) {\r\n            casesOn1000 = 0;\r\n            deathsOn1000 = 0;\r\n          } else {\r\n            casesOn1000 = ((item.cases / item.popData2019) * 1000).toFixed(5);\r\n            deathsOn1000 = ((item.deaths / item.popData2019) * 1000).toFixed(5);\r\n          }\r\n           // Add an id to each element in the array\r\n         const id = item.date + item.geoId;\r\n          return { ...item, id, casesOn1000, deathsOn1000};\r\n        });\r\n\r\n\r\n        let allCases = {};\r\n        let allDeaths = {};\r\n        \r\n        \r\n\r\n        const allData = dataWithIndex.map(( item) => {          \r\n          const country = item.countriesAndTerritories;\r\n          const cases = item.cases;\r\n          const deaths = item.deaths;\r\n       \r\n\r\n          if (allCases[country]){\r\n            allCases[country]+= cases;\r\n            allDeaths[country]+= deaths;\r\n          }else{\r\n            allCases[country]= cases;\r\n            allDeaths[country]= deaths;\r\n          }\r\n          item.allCases = allCases[country];\r\n          item.allDeaths = allDeaths[country];\r\n\r\n\r\n          return { ...item, allCases: allCases[country], allDeaths: allDeaths[country] };\r\n        },{})\r\n        // here we need to create a new object allCountries.\r\n\r\n        const allCountries = allData.reduce((accumulator, item) => {\r\n          const date = item.date;\r\n        \r\n          if (!accumulator[date]) {\r\n            accumulator[date] = {\r\n              date,\r\n              cases: 0,\r\n              deaths: 0,\r\n              allCases: 0,\r\n              allDeaths: 0,\r\n              casesOn1000: 0,\r\n              deathsOn1000: 0,\r\n              id: date + \"All_countries\",\r\n              countriesAndTerritories: \"All_countries\"\r\n            };\r\n          }\r\n        \r\n          accumulator[date].cases += item.cases;\r\n          accumulator[date].deaths += item.deaths;\r\n          accumulator[date].allCases += item.allCases;\r\n          accumulator[date].allDeaths += item.allDeaths;\r\n          accumulator[date].casesOn1000 = parseFloat((accumulator[date].casesOn1000 + parseFloat(item.casesOn1000)).toFixed(5));\r\n          accumulator[date].deathsOn1000 = parseFloat((accumulator[date].deathsOn1000 + parseFloat(item.deathsOn1000)).toFixed(5));\r\n        \r\n          return accumulator;\r\n        }, {});\r\n        const allCountriesArray = Object.values(allCountries);\r\n\r\n        allCountriesArray.sort((a, b) => {\r\n          if (a.date > b.date) return -1;\r\n          if (a.date < b.date) return 1;\r\n          return 0;\r\n        });\r\n\r\n        allCountriesArray.forEach(countryData => {\r\n          allData.push(countryData);\r\n        });\r\n        allData.sort((a, b) => {\r\n          if (a.countriesAndTerritories === \"All_countries\") return -1;\r\n          if (b.countriesAndTerritories === \"All_countries\") return 1;\r\n          return 0;\r\n        });\r\n       \r\n\r\n        allData.unshift(allCountriesArray);\r\n\r\n     \r\n        return allData;\r\n      };\r\n    };\r\n\r\n    export default CovidData;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}