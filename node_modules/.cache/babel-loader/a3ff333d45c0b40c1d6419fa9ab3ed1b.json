{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\livea\\\\React\\\\covid-data-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\livea\\\\React\\\\covid-data-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nexport var CovidData = function CovidData() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    covidData = _useState2[0],\n    setCovidData = _useState2[1];\n  useEffect(function () {\n    axios.get('https://opendata.ecdc.europa.eu/covid19/casedistribution/json/').then(function (response) {\n      var isoData = response.data.records.map(function (item) {\n        var parts = item.dateRep.split(\"/\");\n        var isoDateString = \"\".concat(parts[2], \"/\").concat(parts[1], \"/\").concat(parts[0]);\n        //const date = isoDateString.toLocaleString('en-US', { month: 'short', day: '2-digit', year: 'numeric'  });\n\n        //console.log (isoDateString )\n        return _objectSpread({}, item, {\n          isoDateString: isoDateString\n        });\n      });\n      var sortedData = isoData.sort(function (a, b) {\n        if (a.countriesAndTerritories < b.countriesAndTerritories) {\n          return -1;\n        }\n        if (a.countriesAndTerritories > b.countriesAndTerritories) {\n          return 1;\n        }\n        if (a.date < b.date) return -1;\n        if (a.date > b.date) return 1;\n        return 0;\n      });\n\n      // Add an id to each element in the array\n      var dataWithIndex = sortedData.map(function (item) {\n        var casesOn1000 = (item.cases / item.popData2019 * 1000).toFixed(5);\n        var deathsOn1000 = (item.deaths / item.popData2019 * 1000).toFixed(5);\n        var id = item.dateRep + item.geoId;\n        return _objectSpread({}, item, {\n          id: id,\n          casesOn1000: casesOn1000,\n          deathsOn1000: deathsOn1000\n        });\n      });\n      var allCases = {};\n      var allDeaths = {};\n      var allCasesDeathsByCountry = dataWithIndex.map(function (item) {\n        var country = item.countriesAndTerritories;\n        var cases = item.cases;\n        var deaths = item.deaths;\n        if (allCases[country]) {\n          allCases[country] += cases;\n          allDeaths[country] += deaths;\n        } else {\n          allCases[country] = cases;\n          allDeaths[country] = deaths;\n        }\n        item.allCases = allCases[country];\n        item.allDeaths = allDeaths[country];\n        return item;\n      }, {});\n      setCovidData(allCasesDeathsByCountry);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }, []);\n  console.log;\n  return;\n  covidData;\n};\nexport default CovidData;","map":{"version":3,"names":["useState","useEffect","axios","CovidData","_useState","_useState2","_slicedToArray","covidData","setCovidData","get","then","response","isoData","data","records","map","item","parts","dateRep","split","isoDateString","concat","_objectSpread","sortedData","sort","a","b","countriesAndTerritories","date","dataWithIndex","casesOn1000","cases","popData2019","toFixed","deathsOn1000","deaths","id","geoId","allCases","allDeaths","allCasesDeathsByCountry","country","catch","error","console","log"],"sources":["C:/Users/livea/React/covid-data-app/src/components/Data.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nexport const CovidData = () => {\r\n  const [covidData, setCovidData] = useState([]);\r\n \r\n  \r\n \r\n\r\n  useEffect(() => {\r\n    axios.get('https://opendata.ecdc.europa.eu/covid19/casedistribution/json/')\r\n      .then((response) => {\r\n        \r\n        const isoData = response.data.records.map((item) => {\r\n          const parts = item.dateRep.split(\"/\");\r\n          const isoDateString = `${parts[2]}/${parts[1]}/${parts[0]}`;\r\n         //const date = isoDateString.toLocaleString('en-US', { month: 'short', day: '2-digit', year: 'numeric'  });\r\n         \r\n          //console.log (isoDateString )\r\n          return { ...item, isoDateString  };\r\n        });\r\n\r\n\r\n        const sortedData = isoData.sort((a, b) => {\r\n          if (a.countriesAndTerritories < b.countriesAndTerritories) {\r\n            return -1;\r\n          }\r\n          if (a.countriesAndTerritories > b.countriesAndTerritories) {\r\n            return 1;\r\n          }\r\n          if (a.date < b.date) return -1;\r\n          if (a.date > b.date) return 1;\r\n          return 0;\r\n         \r\n        });\r\n\r\n        // Add an id to each element in the array\r\n        const dataWithIndex = sortedData.map((item) => {\r\n          const casesOn1000 = ((item.cases/ item.popData2019) *1000).toFixed(5);\r\n          const deathsOn1000 = ((item.deaths/ item.popData2019) *1000).toFixed(5);\r\n         const id = item.dateRep + item.geoId;\r\n          return { ...item, id, casesOn1000, deathsOn1000};\r\n        });\r\n\r\n\r\n        let allCases = {};\r\n        let allDeaths = {};\r\n        \r\n        const allCasesDeathsByCountry = dataWithIndex.map(( item) => {\r\n          \r\n          \r\n          let country = item.countriesAndTerritories;\r\n          let cases = item.cases;\r\n          let deaths = item.deaths;\r\n\r\n          if (allCases[country]){\r\n            allCases[country]+= cases;\r\n            allDeaths[country]+= deaths;\r\n          }else{\r\n            allCases[country]= cases;\r\n            allDeaths[country]= deaths;\r\n          }\r\n          item.allCases = allCases[country];\r\n          item.allDeaths = allDeaths[country];\r\n\r\n          return item;\r\n\r\n        \r\n         \r\n          \r\n        }, {});\r\n\r\n  \r\n       \r\n        setCovidData(allCasesDeathsByCountry);\r\n       \r\n        \r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, []);\r\n\r\n   console.log\r\n  return \r\n   covidData;\r\n};\r\n\r\nexport default CovidData;"],"mappings":"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"},"metadata":{},"sourceType":"module"}