{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\livea\\\\React\\\\covid-data-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport DateRangePicker from './components/DateRangeComp';\nimport VisualizationType from \"./components/VisualizationType\";\nimport CountrySelector from './components/CountrySelector';\nimport Viewer from './components/Viewer';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState('allCountries');\n  const [dateRange, setDateRange] = useState({\n    startDate: moment('2019-12-31'),\n    endDate: moment('2020-12-31')\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await CovidData();\n      setData(result);\n    };\n    fetchData();\n  }, []);\n  useEffect(() => {\n    filterData(selectedCountry, dateRange);\n  }, [data]);\n  const filterData = (country, dateRange) => {\n    let filtered = data;\n    if (country) {\n      if (country === \"allCountries\") {\n        filtered = filtered.filter(item => item.countriesAndTerritories === country);\n      } else {\n        filtered = filtered.filter(item => item.countriesAndTerritories === country);\n      }\n    }\n    if (dateRange.startDate && dateRange.endDate) {\n      filtered = filtered.filter(item => moment(item.date).isBetween(dateRange.startDate, dateRange.endDate, undefined, '[]'));\n    }\n    setFilteredData(filtered);\n  };\n  const handleCountryChange = event => {\n    const country = event.target.value;\n    setSelectedCountry(country);\n    filterData(country, dateRange);\n  };\n  const handleDateRangeChange = (startDate, endDate) => {\n    setDateRange({\n      startDate,\n      endDate\n    });\n    filterData(selectedCountry, {\n      startDate,\n      endDate\n    });\n  };\n  const countries = useMemo(() => {\n    const uniqueCountries = Array.from(new Set(data.map(item => item.countriesAndTerritories)));\n    const sortedCountries = uniqueCountries.sort();\n    const index = sortedCountries.indexOf(\"allCountries\");\n    if (index > -1) {\n      sortedCountries.splice(index, 1);\n    }\n    return [\"allCountries\", ...sortedCountries];\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Covid Data Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DateRangePicker, {\n      dateRange: dateRange,\n      setDateRange: setDateRange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VisualizationType, {\n      visualizationType: visualizationType,\n      setVisualizationType: setVisualizationType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CountrySelector, {\n      selectedCountry: selectedCountry,\n      setSelectedCountry: setSelectedCountry\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Viewer, {\n      dateRange: dateRange,\n      visualizationType: visualizationType,\n      selectedCountry: selectedCountry\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"fwKYdVa4p1aR673eJKdj8CVbrRQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","DateRangePicker","VisualizationType","CountrySelector","Viewer","jsxDEV","_jsxDEV","App","_s","data","setData","filteredData","setFilteredData","selectedCountry","setSelectedCountry","dateRange","setDateRange","startDate","moment","endDate","useEffect","fetchData","result","CovidData","filterData","country","filtered","filter","item","countriesAndTerritories","date","isBetween","undefined","handleCountryChange","event","target","value","handleDateRangeChange","countries","useMemo","uniqueCountries","Array","from","Set","map","sortedCountries","sort","index","indexOf","splice","className","children","fileName","_jsxFileName","lineNumber","columnNumber","visualizationType","setVisualizationType","_c","$RefreshReg$"],"sources":["C:/Users/livea/React/covid-data-app/src/App.js"],"sourcesContent":["import React, {useState} from 'react';\nimport DateRangePicker from './components/DateRangeComp';\nimport VisualizationType from \"./components/VisualizationType\";\nimport CountrySelector from  './components/CountrySelector';\nimport Viewer from './components/Viewer';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport './App.css';\n\nconst App = () => {\n\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState('allCountries');\n  const [dateRange, setDateRange] = useState({ startDate: moment('2019-12-31'), endDate: moment('2020-12-31') });\n\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await CovidData();\n      setData(result);\n      \n    };\n    fetchData();\n  }, []);\n\n\n  useEffect(() => {\n    filterData(selectedCountry, dateRange);\n  }, [data]);\n\n\n  const filterData = (country, dateRange) => {\n    let filtered = data;\n\n    if (country) {\n      if (country === \"allCountries\") {\n        filtered = filtered.filter(\n          (item) => item.countriesAndTerritories === country\n        );\n      } else {\n        filtered = filtered.filter(\n          (item) => item.countriesAndTerritories === country\n        );\n      }\n    }\n  \n    if (dateRange.startDate && dateRange.endDate) {\n      filtered = filtered.filter((item) =>\n        moment(item.date).isBetween(\n          dateRange.startDate,\n          dateRange.endDate,\n          undefined,\n          '[]'\n        )\n      );\n    }\n  \n    setFilteredData(filtered);\n  };\n\n  const handleCountryChange = (event) => {\n    const country = event.target.value;\n    setSelectedCountry(country);\n    filterData(country, dateRange);\n  };\n\n  const handleDateRangeChange = (startDate, endDate) => {\n    setDateRange({ startDate, endDate });\n    filterData(selectedCountry, { startDate, endDate });\n  };\n\n  const countries = useMemo(() => {\n    const uniqueCountries = Array.from(\n      new Set(data.map((item) => item.countriesAndTerritories))\n    );\n    const sortedCountries = uniqueCountries.sort();\n    const index = sortedCountries.indexOf(\"allCountries\");\n    if (index > -1) {\n      sortedCountries.splice(index, 1);\n    }\n    return [\"allCountries\", ...sortedCountries];\n  }, [data]);\n\n\n\n\n  return (\n    <div className=\"App\">\n      <h1>Covid Data Visualizer</h1>\n      <DateRangePicker dateRange={dateRange} setDateRange={setDateRange} />\n      <VisualizationType\n        visualizationType={visualizationType}\n        setVisualizationType={setVisualizationType}\n      />\n      <CountrySelector\n        selectedCountry={selectedCountry}\n        setSelectedCountry={setSelectedCountry}\n      />\n      <Viewer\n        dateRange={dateRange}\n        visualizationType={visualizationType}\n        selectedCountry={selectedCountry}\n      />\n    \n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}